// LICENSE: https://raw.github.com/gree/lwf/master/LICENSE
// Generated by CoffeeScript 1.3.3
(function() {
  var isMobile = navigator.userAgent.match(/(iPhone|iPad|Android)/);
  var Game;

  Game = (function() {
    function Game(stage, cache, textNode, graphNode) {
      this.stage = stage;
      this.stageIsCanvas = (stage.tagName.toLowerCase() === "canvas");
      this.cache = cache;
      this.textNode = textNode != null ? textNode : null;
      this.graphNode = graphNode != null ? graphNode : null;
      this.requests = [];
      if (this.graphNode != null) {
        this.ctx = this.graphNode.getContext("2d");
        this.graphIndex = 0;
        this.graphX = 0;
        this.graphY = 0;
        this.graphWidth = this.graphNode.width;
        this.graphHeight = this.graphNode.height;
      }
    }

    Game.prototype.requestLWF = function(lwfName, onload) {
      var prefix;
      if (lwfName.match(/(.*\/)([^\/]+)/)) {
        prefix = RegExp.$1;
        lwfName = RegExp.$2;
      } else {
        prefix = "";
      }
      return this.requests.push({
        "lwf": lwfName,
        "prefix": prefix,
        "stage": this.stage,
        "onload": onload,
        "useBackgroundColor": true
      });
    };

    Game.prototype.loadLWFs = function(onloadall) {
      this.cache.loadLWFs(this.requests, onloadall);
      return this.requests = [];
    };

    Game.prototype.load = function(lwfName) {
      var _this = this;
      this.requestLWF(lwfName, function(lwf) {
        return _this.lwf = lwf;
      });
      return this.loadLWFs(function() {
        return _this.init();
      });
    };

    Game.prototype.getTime = function() {
      return Date.now() / 1000.0;
    };

    Game.prototype.inputPoint = function(e) {
      var x, y;
      if (isMobile) {
        var t = e.touches[0];
        x = t.pageX + document.body.scrollLeft + document.documentElement.scrollLeft - this.stage.offsetLeft;
        y = t.pageY + document.body.scrollTop + document.documentElement.scrollTop - this.stage.offsetTop;
      } else {
        x = e.clientX + document.body.scrollLeft + document.documentElement.scrollLeft - this.stage.offsetLeft;
        y = e.clientY + document.body.scrollTop + document.documentElement.scrollTop - this.stage.offsetTop;
      }
      if (! this.stageIsCanvas && this.stage.style.height.match(/(\d+)px/)) {
        var h = parseInt(RegExp.$1, 10);
        var scale = h / this.lwf.height;
        x /= scale;
        y /= scale;
        console.log("" + x + " " + y);
      }
      return this.lwf.inputPoint(x, y);
    };

    Game.prototype.inputPress = function(e) {
      this.inputPoint(e);
      return this.lwf.inputPress();
    };

    Game.prototype.inputRelease = function(e) {
      return this.lwf.inputRelease();
    };

    Game.prototype.init = function() {
      var t0Tapped = 0;
      var t1Tapped = this.getTime();
      var onmove, onpress, onrelease, ongestureend,
        _this = this;
      this.inputQueue = [];
      this.lwf.rendererFactory.fitForHeight(this.lwf);
      this.from = this.from60 = this.getTime();
      this.fps60 = 0;
      this.execCount = 0;
      this.exec();
      onmove = function(e) {
        if (isMobile) {
          e.preventDefault();
        }
        return (function(e) {
          return _this.inputQueue.push(function() {
            return _this.inputPoint(e);
          });
        })(e);
      };
      onpress = function(e) {
        if (isMobile) {
          e.preventDefault();
        }
        return (function(e) {
          return _this.inputQueue.push(function() {
            return _this.inputPress(e);
          });
        })(e);
      };
      onrelease = function(e) {
        if (isMobile) {
          e.preventDefault();
        }
        // A tripple tap invokes ongestureend(), for old browsers on
        // andorid, which don't support multitouch and gestures.
        {
          var t2Tapped = Date.now();
          if (t2Tapped - t1Tapped < 500 && t1Tapped - t0Tapped < 500) {
            ongestureend();
          }
          t0Tapped = t1Tapped;
          t1Tapped = t2Tapped;
        }
        return (function(e) {
          return _this.inputQueue.push(function() {
            return _this.inputRelease(e);
          });
        })(e);
      };
      ongestureend = function(e) {
        // If a user swipes the screen with two fingers, rewind the lwf.
        _this.inputQueue = [];
        _this.lwf.init();
        _this.lwf.rootMovie.gotoAndPlay(1);
      };
      if (isMobile) {
        this.stage.addEventListener("touchstart", onpress, false);
        this.stage.addEventListener("touchmove", onmove, false);
        this.stage.addEventListener("touchend", onrelease, false);
        this.stage.addEventListener("gestureend", ongestureend, false);
      } else {
        this.stage.addEventListener("mousedown", onpress, false);
        this.stage.addEventListener("mousemove", onmove, false);
        this.stage.addEventListener("mouseup", onrelease, false);
      }
    };

    Game.prototype.exec = function() {
      var fps, input, tick, time, _i, _len, _ref,
        _this = this;
      time = this.getTime();
      tick = time - this.from;
      this.from = time;
      if (++this.execCount == 60) {
        this.fps60 = Math.round(60.0 / (time - this.from60));
        this.from60 = time;
        this.execCount = 0;
      }
      _ref = this.inputQueue;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        input();
      }
      this.inputQueue = [];
      this.lwf.exec(tick);
      this.lwf.render();
      if (this.textNode != null) {
        fps = Math.round(1.0 / tick);
        this.textNode.textContent = this.fps60 + " fps(avg) " + fps + "fps";
        if (this.ctx != null) {
          var x = this.graphIndex;
          var y = (1 - fps / 60) * (this.graphHeight - 1);
          if (y < 0) {
            y = 0;
          }
          if (y >= this.graphHeight) {
            y = this.graphHeight - 1;
          }
          this.ctx.fillStyle = "rgb(255,255,255)";
          this.ctx.fillRect(this.graphX, 0, 2, this.graphHeight);
          this.ctx.fillStyle = "rgb(0,0,0)";
          this.ctx.beginPath();
          this.ctx.moveTo(this.graphX, this.graphY);
          this.ctx.lineTo(x, y);
          this.ctx.stroke();
          this.graphX = x;
          this.graphY = y;
          this.graphIndex += 2;
          if (this.graphIndex > this.graphWidth) {
            this.graphIndex = 0;
            this.graphX = 0;
          }
        }
      }
      return requestAnimationFrame(function() {
        return _this.exec();
      });
    };

    return Game;

  })();

  window.onload = function() {
    var LWF, cache, div, graphNode, game, lastTime, lwfName, renderer, stage, textNode, vendor, _i, _len, _ref;
    if (window.requestAnimationFrame == null) {
      _ref = ['webkit', 'moz'];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        vendor = _ref[_i];
        window.requestAnimationFrame = window[vendor + 'RequestAnimationFrame'];
        if (window.requestAnimationFrame != null) {
          break;
        }
      }
    }
    if (window.requestAnimationFrame == null) {
      lastTime = 0;
      window.requestAnimationFrame = function(callback, element) {
        var currTime, id, timeToCall, timeoutCallback;
        currTime = new Date().getTime();
        if (lastTime === 0) {
          lastTime = currTime;
        }
        timeToCall = Math.max(0, 16 - (currTime - lastTime));
        timeoutCallback = function() {
          return callback(currTime + timeToCall);
        };
        id = window.setTimeout(timeoutCallback, timeToCall);
        lastTime = currTime + timeToCall;
        return id;
      };
    }
    LWF = window["LWF"];
    if (window.location.search.match(/lwf=([^=&]+)/)
        || (typeof window["test_args"] != undefined
            && window["test_args"].match(/lwf=([^=&]+)/))) {
      lwfName = RegExp.$1;
    } else if (typeof window["test_lwf"] != undefined) {
      lwfName = window["test_lwf"];
    } else {
      lwfName = "testlwf.lwf";
    }
    renderer = "canvas";
    if (window.location.search.match(/renderer=(canvas|webgl|webkitcss)/)
        || (typeof window["test_args"] != undefined
            && window["test_args"].match(/renderer=(canvas|webgl|webkitcss)/))) {
      renderer = RegExp.$1;
    }
    if (renderer === "canvas" || renderer === "webgl") {
      stage = document.createElement("canvas");
      if (renderer === "canvas") {
        LWF.useCanvasRenderer();
      } else {
        LWF.useWebGLRenderer();
      }
    } else {
      stage = document.createElement("div");
      LWF.useWebkitCSSRenderer();
    }
    var w = 0;
    var h = 0;
    stage.style.position = "absolute";
    stage.width = 0;
    stage.height = 0;
    stage.style.width = "0px";
    stage.style.height = "0px";
    // Set the stage style.{width,height} if "size=XXXxYYY" is specified.
    if (window.location.search.match(/size=(\d+)x(\d+)/)
        || (typeof window["test_args"] != undefined
               && window["test_args"].match(/size=(\d+)x(\d+)/))) {
      w = parseInt(RegExp.$1, 10);
      h = parseInt(RegExp.$2, 10);
      // Multiply stage.{width,height} by window.devicePixelRatio.
      stage.width = ~~(w * window.devicePixelRatio);
      stage.height = ~~(h * window.devicePixelRatio);
      stage.style.width = "" + w + "px";
      stage.style.height = "" + h + "px";
    }
    cache = LWF.ResourceCache.get();
    // Display a QR code of this page only if it is running on PC and
    // "qrcode=true" is specified.
    if (! isMobile
        && (window.location.search.match(/qrcode=(true|false)/)
            || (typeof window["test_args"] != undefined
                && window["test_args"].match(/qrcode=(true|false)/)))) {
      if (RegExp.$1 === "true") {
        var qr = document.createElement('div');
        var q = qrcode(7, "L");
        q.addData(window.location.href);
        q.make();
        qr.innerHTML = q.createImgTag();
        document.body.appendChild(qr);
      }
    }
    // Display fps if "fps=true" is specified.
    if (window.location.search.match(/fps=(true|false)/)
        || (typeof window["test_args"] != undefined
            && window["test_args"].match(/fps=(true|false)/))) {
      if (RegExp.$1 === "true") {
        document.body.appendChild(document.createElement('br'));
        graphNode = document.createElement("canvas");
        graphNode.width = w - 140;
        graphNode.height = 24;
        graphNode.style.width = '' + (w - 140) + 'px';
        graphNode.style.height = '24px';
        document.body.appendChild(graphNode);
        textNode = document.createTextNode("0fps");
        document.body.appendChild(textNode);
        document.body.appendChild(document.createElement('br'));
      }
    }
    div = document.createElement("div");
    document.body.appendChild(div);
    div.appendChild(stage);
    game = new Game(stage, cache, textNode, graphNode);
    window["game"] = game;
    return game.load(lwfName);
  };

}).call(this);
